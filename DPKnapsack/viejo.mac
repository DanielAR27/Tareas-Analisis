ayuda(n, objetos) := block(
    /* Declarar variables locales */
    [matriz, objetos_longitud, par, ganancia_objeto, peso_objeto, 
    anterior_existe, ganancia_existe, precio_anterior, precio_ganancia,
    max_notFitting, max_Fitting, valor_anterior, valor_ganancia],
    matriz: crearMatriz(n, objetos),
    objetos_longitud: length(objetos),

    /* Iterar sobre las filas */
    for i:2 thru objetos_longitud + 1 do (
        par : objetos[i - 1], /* Obtener el par correspondiente */
        ganancia_objeto: first(second(par)),
        peso_objeto: second(second(par)), /* Obtener el peso del objeto. */
        /*print("Par: ", par),*/  /* Imprimir el par (nombre y valores) */
        
        /* Iterar sobre las columnas de la matriz */
        for j:2 thru n + 1 do (
            /*print("Valor: ", second(second(par))),*/
            /* Mostrar los valores de la matriz y los índices */
            /*print("Elemento: ", matriz[i][j], " (i: ", i, ", j: ", j, ")"),*/
            /* Si el peso de la columna es menor que el peso del objeto, no cabe en la mochila */
            if (j - 1 < peso_objeto) then (
				anterior_existe: false,
                /* Calcular el elemento mat[i-1][j] */
                
                /* Si la fila corresponde a la fila cero (pues la fila uno en realidad contiene basura), entonces se asigna 0 como precio anterior */
                if (i - 1 <= 1) then
                    precio_anterior : 0
                /* Si no, entonces se obtiene el precio del elemento anterior */
                else(
                    precio_anterior : first(matriz[i - 1][j]),
					anterior_existe:true
				),

                max_notFitting : max(0, precio_anterior),
				
				/*print("el max not fitting es: ", max_notFitting), */
                /* Si el máximo corresponde al valor del precio anterior, se agrega */
				if anterior_existe then
					if max_notFitting = first(matriz[i - 1][j]) then
						matriz[i][j] : [max_notFitting, second(matriz[i - 1][j])]
                   
            ) else (
				anterior_existe: false,
				ganancia_existe: false,
				
                /* Si la fila corresponde a la fila cero (pues la fila uno en realidad contiene basura), entonces se asigna 0 como precio anterior */
                if (i - 1 <= 1) then
                    precio_anterior : 0
                /* Si no, entonces se obtiene el precio del elemento anterior */
                else(
                    precio_anterior : first(matriz[i - 1][j]),
					anterior_existe: true
				),
				
                if (i - 1 <= 1 or j - peso_objeto <= 1) then
                    precio_ganancia : ganancia_objeto
                else(
                    precio_ganancia : ganancia_objeto + first(matriz[i - 1][j - peso_objeto]),
					ganancia_existe: true
				),

                max_Fitting : max(precio_anterior, precio_ganancia),
				
				/*print("el max fitting es: ", max_Fitting),*/
                if ganancia_existe then
					if max_Fitting = ganancia_objeto +  first(matriz[i - 1][j - peso_objeto]) then
                    matriz[i][j] : [max_Fitting, append(second(matriz[i - 1][j - peso_objeto]), [first(par)])],

                if max_Fitting = ganancia_objeto then
                    matriz[i][j] : [max_Fitting, [first(par)]],

				if anterior_existe then(
					/*print("bingo"),*/
					/*print("first(matriz[i - 1][j])", first(matriz[i - 1][j])),*/
					if max_Fitting = first(matriz[i - 1][j]) then
						matriz[i][j] : [max_Fitting, second(matriz[i - 1][j])]
				)
            )
        )
    ),
	
	apply(matrix, matriz)
);